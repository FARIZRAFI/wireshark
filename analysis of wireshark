WIRESHARK
analysis of wireshark
1. Start Capturing on Active Network Interface
Open Wireshark.

Select your active network interface (e.g., Wi-Fi, Ethernet).

Click the blue shark fin icon to start capturing.

2. Browse a Website or Ping a Server
Open a browser and visit a website (e.g., https://example.com)
3. Stop Capture After a Minute
Let the capture run for ~1 minute.

Click the red square icon in Wireshark to stop capturing.

4. Filter Captured Packets by Protocol
Use these display filters in the top filter bar:

http ‚Äì filters HTTP traffic

dns ‚Äì filters DNS queries and responses

tcp ‚Äì filters all TCP packets

You can try others like icmp, tls, or arp.

5. Identify at Least 3 Different Protocols
Examples likely found:

DNS ‚Äì Domain name resolution (UDP port 53)

HTTP/HTTPS ‚Äì Web browsing

TCP ‚Äì Underlying transport layer for most applications

Other possible ones: TLS, ICMP, ARP, UDP

6. Export the Capture as a .pcap File
File ‚Üí Export Specified Packets ‚Üí Save as .pcap


üìä Summary of Findings
‚úÖ Captured Activity
The traffic capture involves:

DNS queries and responses

TCP handshakes and resets

TLS 1.2 and TLS 1.3 encrypted communication

NTP (Network Time Protocol) client-server exchange

üì° Protocols Identified
At least 4 different protocols were observed:

DNS (Domain Name System)

Used to resolve domain names like plugins.nessus.org.

DNS query and response packets show interaction with Cloudflare DNS (104.18.37.251 and 172.64.150.5).

TCP (Transmission Control Protocol)

Several TCP handshakes and a RST (reset) packet indicate active and failed connection attempts.

Port 443 used‚Äîcommon for HTTPS traffic.

TLS (Transport Layer Security)

Version: TLSv1.2 and TLSv1.3

Encrypted communication initiated after TCP handshake.

TLS exchange includes Change Cipher Spec and Application Data.

NTP (Network Time Protocol)

Synchronization messages between local machine (192.168.2.128) and public time server (140.138.60.107).

Shows both client request and server response.

üîç Interesting Packet Examples
Packet #1‚Äì2: DNS query to resolve plugins.nessus.org using UDP port 53.

Packet #7‚Äì15: TCP handshake followed by TLS 1.3 negotiation and encrypted data transfer.

Packet #21: TLS Application Data (encrypted), 757 bytes.

Packet #22: TCP RST from local host ‚Äî suggests the connection was reset or closed abruptly.

Packets #23‚Äì24: NTP communication showing client-server time sync exchange.

üß† Insights
The traffic appears to be generated by a vulnerability scanner or security tool (e.g., Nessus) attempting to reach a plugin update server (plugins.nessus.org).

Encrypted HTTPS connections are made to the domain, and time synchronization is also happening in parallel.

The presence of a TCP RST may indicate either a blocked connection or an abrupt termination by the client/server.







